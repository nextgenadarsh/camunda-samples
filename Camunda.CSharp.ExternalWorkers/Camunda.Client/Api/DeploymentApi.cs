/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * OpenAPI spec version: 7.13.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Camunda.Client.Client;
using Camunda.Client.Model;

namespace Camunda.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDeploymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        DeploymentWithDefinitionsDto CreateDeployment (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        ApiResponse<DeploymentWithDefinitionsDto> CreateDeploymentWithHttpInfo (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteDeployment (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeploymentWithHttpInfo (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        List<DeploymentDto> GetDeployment (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        ApiResponse<List<DeploymentDto>> GetDeploymentWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>DeploymentResourceDto</returns>
        DeploymentResourceDto GetDeploymentResource (string id, string resourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>ApiResponse of DeploymentResourceDto</returns>
        ApiResponse<DeploymentResourceDto> GetDeploymentResourceWithHttpInfo (string id, string resourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>byte[]</returns>
        byte[] GetDeploymentResourceData (string id, string resourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetDeploymentResourceDataWithHttpInfo (string id, string resourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>List&lt;DeploymentResourceDto&gt;</returns>
        List<DeploymentResourceDto> GetDeploymentResources (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>ApiResponse of List&lt;DeploymentResourceDto&gt;</returns>
        ApiResponse<List<DeploymentResourceDto>> GetDeploymentResourcesWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        List<DeploymentDto> GetDeployments (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        ApiResponse<List<DeploymentDto>> GetDeploymentsWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetDeploymentsCount (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetDeploymentsCountWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        DeploymentWithDefinitionsDto Redeploy (string id, RedeploymentDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        ApiResponse<DeploymentWithDefinitionsDto> RedeployWithHttpInfo (string id, RedeploymentDto body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> CreateDeploymentAsync (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentWithDefinitionsDto>> CreateDeploymentAsyncWithHttpInfo (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeploymentAsync (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentAsyncWithHttpInfo (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentDto>>> GetDeploymentAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>Task of DeploymentResourceDto</returns>
        System.Threading.Tasks.Task<DeploymentResourceDto> GetDeploymentResourceAsync (string id, string resourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a deployment resource by resource id for the given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>Task of ApiResponse (DeploymentResourceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResourceDto>> GetDeploymentResourceAsyncWithHttpInfo (string id, string resourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetDeploymentResourceDataAsync (string id, string resourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetDeploymentResourceDataAsyncWithHttpInfo (string id, string resourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>Task of List&lt;DeploymentResourceDto&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentResourceDto>> GetDeploymentResourcesAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all deployment resources of a given deployment.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResourceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentResourceDto>>> GetDeploymentResourcesAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentsAsync (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentDto>>> GetDeploymentsAsyncWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetDeploymentsCountAsync (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetDeploymentsCountAsyncWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> RedeployAsync (string id, RedeploymentDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentWithDefinitionsDto>> RedeployAsyncWithHttpInfo (string id, RedeploymentDto body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DeploymentApi : IDeploymentApi
    {
        private Camunda.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeploymentApi(String basePath)
        {
            this.Configuration = new Camunda.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class
        /// </summary>
        /// <returns></returns>
        public DeploymentApi()
        {
            this.Configuration = Camunda.Client.Client.Configuration.Default;

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeploymentApi(Camunda.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Camunda.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        public DeploymentWithDefinitionsDto CreateDeployment (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null)
        {
             ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = CreateDeploymentWithHttpInfo(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        public ApiResponse< DeploymentWithDefinitionsDto > CreateDeploymentWithHttpInfo (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null)
        {

            var localVarPath = "/deployment/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarFormParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // form parameter
            if (deploymentSource != null) localVarFormParams.Add("deployment-source", this.Configuration.ApiClient.ParameterToString(deploymentSource)); // form parameter
            if (deployChangedOnly != null) localVarFormParams.Add("deploy-changed-only", this.Configuration.ApiClient.ParameterToString(deployChangedOnly)); // form parameter
            if (enableDuplicateFiltering != null) localVarFormParams.Add("enable-duplicate-filtering", this.Configuration.ApiClient.ParameterToString(enableDuplicateFiltering)); // form parameter
            if (deploymentName != null) localVarFormParams.Add("deployment-name", this.Configuration.ApiClient.ParameterToString(deploymentName)); // form parameter
            if (data != null) localVarFileParams.Add("data", this.Configuration.ApiClient.ParameterToFile("data", data));

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentWithDefinitionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentWithDefinitionsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentWithDefinitionsDto)));
        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        public async System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> CreateDeploymentAsync (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null)
        {
             ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = await CreateDeploymentAsyncWithHttpInfo(tenantId, deploymentSource, deployChangedOnly, enableDuplicateFiltering, deploymentName, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="deploymentSource"> (optional)</param>
        /// <param name="deployChangedOnly"> (optional)</param>
        /// <param name="enableDuplicateFiltering"> (optional)</param>
        /// <param name="deploymentName"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentWithDefinitionsDto>> CreateDeploymentAsyncWithHttpInfo (string tenantId = null, string deploymentSource = null, bool? deployChangedOnly = null, bool? enableDuplicateFiltering = null, string deploymentName = null, byte[] data = null)
        {

            var localVarPath = "/deployment/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarFormParams.Add("tenant-id", this.Configuration.ApiClient.ParameterToString(tenantId)); // form parameter
            if (deploymentSource != null) localVarFormParams.Add("deployment-source", this.Configuration.ApiClient.ParameterToString(deploymentSource)); // form parameter
            if (deployChangedOnly != null) localVarFormParams.Add("deploy-changed-only", this.Configuration.ApiClient.ParameterToString(deployChangedOnly)); // form parameter
            if (enableDuplicateFiltering != null) localVarFormParams.Add("enable-duplicate-filtering", this.Configuration.ApiClient.ParameterToString(enableDuplicateFiltering)); // form parameter
            if (deploymentName != null) localVarFormParams.Add("deployment-name", this.Configuration.ApiClient.ParameterToString(deploymentName)); // form parameter
            if (data != null) localVarFileParams.Add("data", this.Configuration.ApiClient.ParameterToFile("data", data));

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentWithDefinitionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentWithDefinitionsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentWithDefinitionsDto)));
        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteDeployment (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null)
        {
             DeleteDeploymentWithHttpInfo(id, cascade, skipCustomListeners, skipIoMappings);
        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDeploymentWithHttpInfo (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->DeleteDeployment");

            var localVarPath = "/deployment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeploymentAsync (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null)
        {
             await DeleteDeploymentAsyncWithHttpInfo(id, cascade, skipCustomListeners, skipIoMappings);

        }

        /// <summary>
        ///  Deletes a deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to be deleted.</param>
        /// <param name="cascade">&#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (optional, default to false)</param>
        /// <param name="skipCustomListeners">&#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (optional, default to false)</param>
        /// <param name="skipIoMappings">&#x60;true&#x60;, if all input/output mappings should not be invoked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentAsyncWithHttpInfo (string id, bool? cascade = null, bool? skipCustomListeners = null, bool? skipIoMappings = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->DeleteDeployment");

            var localVarPath = "/deployment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter
            if (skipCustomListeners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipCustomListeners", skipCustomListeners)); // query parameter
            if (skipIoMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skipIoMappings", skipIoMappings)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        public List<DeploymentDto> GetDeployment (string id)
        {
             ApiResponse<List<DeploymentDto>> localVarResponse = GetDeploymentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        public ApiResponse< List<DeploymentDto> > GetDeploymentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeployment");

            var localVarPath = "/deployment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentDto>)));
        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentAsync (string id)
        {
             ApiResponse<List<DeploymentDto>> localVarResponse = await GetDeploymentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeploymentDto>>> GetDeploymentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeployment");

            var localVarPath = "/deployment/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentDto>)));
        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>DeploymentResourceDto</returns>
        public DeploymentResourceDto GetDeploymentResource (string id, string resourceId)
        {
             ApiResponse<DeploymentResourceDto> localVarResponse = GetDeploymentResourceWithHttpInfo(id, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>ApiResponse of DeploymentResourceDto</returns>
        public ApiResponse< DeploymentResourceDto > GetDeploymentResourceWithHttpInfo (string id, string resourceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResource");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResource");

            var localVarPath = "/deployment/{id}/resources/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResourceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentResourceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResourceDto)));
        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>Task of DeploymentResourceDto</returns>
        public async System.Threading.Tasks.Task<DeploymentResourceDto> GetDeploymentResourceAsync (string id, string resourceId)
        {
             ApiResponse<DeploymentResourceDto> localVarResponse = await GetDeploymentResourceAsyncWithHttpInfo(id, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a deployment resource by resource id for the given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment</param>
        /// <param name="resourceId">The id of the deployment resource</param>
        /// <returns>Task of ApiResponse (DeploymentResourceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResourceDto>> GetDeploymentResourceAsyncWithHttpInfo (string id, string resourceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResource");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResource");

            var localVarPath = "/deployment/{id}/resources/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResourceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentResourceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResourceDto)));
        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>byte[]</returns>
        public byte[] GetDeploymentResourceData (string id, string resourceId)
        {
             ApiResponse<byte[]> localVarResponse = GetDeploymentResourceDataWithHttpInfo(id, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetDeploymentResourceDataWithHttpInfo (string id, string resourceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResourceData");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResourceData");

            var localVarPath = "/deployment/{id}/resources/{resourceId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResourceData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetDeploymentResourceDataAsync (string id, string resourceId)
        {
             ApiResponse<byte[]> localVarResponse = await GetDeploymentResourceDataAsyncWithHttpInfo(id, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves the binary content of a deployment resource for the given deployment by id.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment.</param>
        /// <param name="resourceId">The id of the deployment resource.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetDeploymentResourceDataAsyncWithHttpInfo (string id, string resourceId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResourceData");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResourceData");

            var localVarPath = "/deployment/{id}/resources/{resourceId}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResourceData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>List&lt;DeploymentResourceDto&gt;</returns>
        public List<DeploymentResourceDto> GetDeploymentResources (string id)
        {
             ApiResponse<List<DeploymentResourceDto>> localVarResponse = GetDeploymentResourcesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>ApiResponse of List&lt;DeploymentResourceDto&gt;</returns>
        public ApiResponse< List<DeploymentResourceDto> > GetDeploymentResourcesWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResources");

            var localVarPath = "/deployment/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResourceDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentResourceDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResourceDto>)));
        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>Task of List&lt;DeploymentResourceDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentResourceDto>> GetDeploymentResourcesAsync (string id)
        {
             ApiResponse<List<DeploymentResourceDto>> localVarResponse = await GetDeploymentResourcesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all deployment resources of a given deployment.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to retrieve the deployment resources for.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResourceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeploymentResourceDto>>> GetDeploymentResourcesAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->GetDeploymentResources");

            var localVarPath = "/deployment/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResourceDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentResourceDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResourceDto>)));
        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;DeploymentDto&gt;</returns>
        public List<DeploymentDto> GetDeployments (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {
             ApiResponse<List<DeploymentDto>> localVarResponse = GetDeploymentsWithHttpInfo(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeploymentDto&gt;</returns>
        public ApiResponse< List<DeploymentDto> > GetDeploymentsWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (withoutSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutSource", withoutSource)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeDeploymentsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentDto>)));
        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;DeploymentDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentDto>> GetDeploymentsAsync (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {
             ApiResponse<List<DeploymentDto>> localVarResponse = await GetDeploymentsAsyncWithHttpInfo(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeploymentDto>>> GetDeploymentsAsyncWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (withoutSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutSource", withoutSource)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeDeploymentsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentDto>)));
        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetDeploymentsCount (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null)
        {
             ApiResponse<CountResultDto> localVarResponse = GetDeploymentsCountWithHttpInfo(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public ApiResponse< CountResultDto > GetDeploymentsCountWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null)
        {

            var localVarPath = "/deployment/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (withoutSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutSource", withoutSource)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeDeploymentsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetDeploymentsCountAsync (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null)
        {
             ApiResponse<CountResultDto> localVarResponse = await GetDeploymentsCountAsyncWithHttpInfo(id, name, nameLike, source, withoutSource, tenantIdIn, withoutTenantId, includeDeploymentsWithoutTenantId, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/7.13/reference/rest/deployment/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by deployment id (optional)</param>
        /// <param name="name">Filter by the deployment name. Exact match. (optional)</param>
        /// <param name="nameLike">Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;). (optional)</param>
        /// <param name="source">Filter by the deployment source. (optional)</param>
        /// <param name="withoutSource">Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (optional, default to false)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="includeDeploymentsWithoutTenantId">Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional, default to false)</param>
        /// <param name="after">Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <param name="before">Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetDeploymentsCountAsyncWithHttpInfo (string id = null, string name = null, string nameLike = null, string source = null, bool? withoutSource = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeDeploymentsWithoutTenantId = null, DateTime? after = null, DateTime? before = null)
        {

            var localVarPath = "/deployment/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (withoutSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutSource", withoutSource)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeDeploymentsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeploymentsWithoutTenantId", includeDeploymentsWithoutTenantId)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DeploymentWithDefinitionsDto</returns>
        public DeploymentWithDefinitionsDto Redeploy (string id, RedeploymentDto body = null)
        {
             ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = RedeployWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DeploymentWithDefinitionsDto</returns>
        public ApiResponse< DeploymentWithDefinitionsDto > RedeployWithHttpInfo (string id, RedeploymentDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->Redeploy");

            var localVarPath = "/deployment/{id}/redeploy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Redeploy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentWithDefinitionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentWithDefinitionsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentWithDefinitionsDto)));
        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DeploymentWithDefinitionsDto</returns>
        public async System.Threading.Tasks.Task<DeploymentWithDefinitionsDto> RedeployAsync (string id, RedeploymentDto body = null)
        {
             ApiResponse<DeploymentWithDefinitionsDto> localVarResponse = await RedeployAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/7.13/user-guide/process-engine/securing-custom-code/) in the user guide for details.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the deployment to re-deploy.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DeploymentWithDefinitionsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentWithDefinitionsDto>> RedeployAsyncWithHttpInfo (string id, RedeploymentDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DeploymentApi->Redeploy");

            var localVarPath = "/deployment/{id}/redeploy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Redeploy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentWithDefinitionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentWithDefinitionsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentWithDefinitionsDto)));
        }

    }
}
