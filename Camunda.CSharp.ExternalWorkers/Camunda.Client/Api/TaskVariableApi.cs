/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * OpenAPI spec version: 7.13.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Camunda.Client.Client;
using Camunda.Client.Model;

namespace Camunda.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITaskVariableApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns></returns>
        void DeleteTaskVariable (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskVariableWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>VariableValueDto</returns>
        VariableValueDto GetTaskVariable (string id, string varName, bool? deserializeValue = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of VariableValueDto</returns>
        ApiResponse<VariableValueDto> GetTaskVariableWithHttpInfo (string id, string varName, bool? deserializeValue = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>byte[]</returns>
        byte[] GetTaskVariableBinary (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetTaskVariableBinaryWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        Dictionary<string, VariableValueDto> GetTaskVariables (string id, bool? deserializeValue = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        ApiResponse<Dictionary<string, VariableValueDto>> GetTaskVariablesWithHttpInfo (string id, bool? deserializeValue = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ModifyTaskVariables (string id, PatchVariablesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ModifyTaskVariablesWithHttpInfo (string id, PatchVariablesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void PutTaskVariable (string id, string varName, VariableValueDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutTaskVariableWithHttpInfo (string id, string varName, VariableValueDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns></returns>
        void SetBinaryTaskVariable (string id, string varName, byte[] data = null, string valueType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetBinaryTaskVariableWithHttpInfo (string id, string varName, byte[] data = null, string valueType = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskVariableAsync (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskVariableAsyncWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of VariableValueDto</returns>
        System.Threading.Tasks.Task<VariableValueDto> GetTaskVariableAsync (string id, string varName, bool? deserializeValue = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (VariableValueDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableValueDto>> GetTaskVariableAsyncWithHttpInfo (string id, string varName, bool? deserializeValue = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetTaskVariableBinaryAsync (string id, string varName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetTaskVariableBinaryAsyncWithHttpInfo (string id, string varName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetTaskVariablesAsync (string id, bool? deserializeValue = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetTaskVariablesAsyncWithHttpInfo (string id, bool? deserializeValue = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ModifyTaskVariablesAsync (string id, PatchVariablesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModifyTaskVariablesAsyncWithHttpInfo (string id, PatchVariablesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutTaskVariableAsync (string id, string varName, VariableValueDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutTaskVariableAsyncWithHttpInfo (string id, string varName, VariableValueDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetBinaryTaskVariableAsync (string id, string varName, byte[] data = null, string valueType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetBinaryTaskVariableAsyncWithHttpInfo (string id, string varName, byte[] data = null, string valueType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TaskVariableApi : ITaskVariableApi
    {
        private Camunda.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskVariableApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskVariableApi(String basePath)
        {
            this.Configuration = new Camunda.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskVariableApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaskVariableApi()
        {
            this.Configuration = Camunda.Client.Client.Configuration.Default;

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskVariableApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskVariableApi(Camunda.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Camunda.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns></returns>
        public void DeleteTaskVariable (string id, string varName)
        {
             DeleteTaskVariableWithHttpInfo(id, varName);
        }

        /// <summary>
        ///  Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskVariableWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->DeleteTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->DeleteTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskVariableAsync (string id, string varName)
        {
             await DeleteTaskVariableAsyncWithHttpInfo(id, varName);

        }

        /// <summary>
        ///  Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to delete the variable from.</param>
        /// <param name="varName">The name of the variable to be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskVariableAsyncWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->DeleteTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->DeleteTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>VariableValueDto</returns>
        public VariableValueDto GetTaskVariable (string id, string varName, bool? deserializeValue = null)
        {
             ApiResponse<VariableValueDto> localVarResponse = GetTaskVariableWithHttpInfo(id, varName, deserializeValue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of VariableValueDto</returns>
        public ApiResponse< VariableValueDto > GetTaskVariableWithHttpInfo (string id, string varName, bool? deserializeValue = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->GetTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->GetTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (deserializeValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValue", deserializeValue)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableValueDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableValueDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableValueDto)));
        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of VariableValueDto</returns>
        public async System.Threading.Tasks.Task<VariableValueDto> GetTaskVariableAsync (string id, string varName, bool? deserializeValue = null)
        {
             ApiResponse<VariableValueDto> localVarResponse = await GetTaskVariableAsyncWithHttpInfo(id, varName, deserializeValue);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable from.</param>
        /// <param name="varName">The name of the variable to get.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (VariableValueDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableValueDto>> GetTaskVariableAsyncWithHttpInfo (string id, string varName, bool? deserializeValue = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->GetTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->GetTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (deserializeValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValue", deserializeValue)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableValueDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableValueDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableValueDto)));
        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>byte[]</returns>
        public byte[] GetTaskVariableBinary (string id, string varName)
        {
             ApiResponse<byte[]> localVarResponse = GetTaskVariableBinaryWithHttpInfo(id, varName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetTaskVariableBinaryWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->GetTaskVariableBinary");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->GetTaskVariableBinary");

            var localVarPath = "/task/{id}/variables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskVariableBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetTaskVariableBinaryAsync (string id, string varName)
        {
             ApiResponse<byte[]> localVarResponse = await GetTaskVariableBinaryAsyncWithHttpInfo(id, varName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetTaskVariableBinaryAsyncWithHttpInfo (string id, string varName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->GetTaskVariableBinary");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->GetTaskVariableBinary");

            var localVarPath = "/task/{id}/variables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "text/plain",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskVariableBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Dictionary&lt;string, VariableValueDto&gt;</returns>
        public Dictionary<string, VariableValueDto> GetTaskVariables (string id, bool? deserializeValue = null)
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = GetTaskVariablesWithHttpInfo(id, deserializeValue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public ApiResponse< Dictionary<string, VariableValueDto> > GetTaskVariablesWithHttpInfo (string id, bool? deserializeValue = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->GetTaskVariables");

            var localVarPath = "/task/{id}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deserializeValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValue", deserializeValue)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        ///  Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of Dictionary&lt;string, VariableValueDto&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, VariableValueDto>> GetTaskVariablesAsync (string id, bool? deserializeValue = null)
        {
             ApiResponse<Dictionary<string, VariableValueDto>> localVarResponse = await GetTaskVariablesAsyncWithHttpInfo(id, deserializeValue);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variables from.</param>
        /// <param name="deserializeValue">Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, VariableValueDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, VariableValueDto>>> GetTaskVariablesAsyncWithHttpInfo (string id, bool? deserializeValue = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->GetTaskVariables");

            var localVarPath = "/task/{id}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deserializeValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deserializeValue", deserializeValue)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, VariableValueDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, VariableValueDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, VariableValueDto>)));
        }

        /// <summary>
        ///  Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ModifyTaskVariables (string id, PatchVariablesDto body = null)
        {
             ModifyTaskVariablesWithHttpInfo(id, body);
        }

        /// <summary>
        ///  Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ModifyTaskVariablesWithHttpInfo (string id, PatchVariablesDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->ModifyTaskVariables");

            var localVarPath = "/task/{id}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ModifyTaskVariablesAsync (string id, PatchVariablesDto body = null)
        {
             await ModifyTaskVariablesAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        ///  Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set variables for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ModifyTaskVariablesAsyncWithHttpInfo (string id, PatchVariablesDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->ModifyTaskVariables");

            var localVarPath = "/task/{id}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void PutTaskVariable (string id, string varName, VariableValueDto body = null)
        {
             PutTaskVariableWithHttpInfo(id, varName, body);
        }

        /// <summary>
        ///  Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutTaskVariableWithHttpInfo (string id, string varName, VariableValueDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->PutTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->PutTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutTaskVariableAsync (string id, string varName, VariableValueDto body = null)
        {
             await PutTaskVariableAsyncWithHttpInfo(id, varName, body);

        }

        /// <summary>
        ///  Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to set the variable for.</param>
        /// <param name="varName">The name of the variable to set.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutTaskVariableAsyncWithHttpInfo (string id, string varName, VariableValueDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->PutTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->PutTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns></returns>
        public void SetBinaryTaskVariable (string id, string varName, byte[] data = null, string valueType = null)
        {
             SetBinaryTaskVariableWithHttpInfo(id, varName, data, valueType);
        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetBinaryTaskVariableWithHttpInfo (string id, string varName, byte[] data = null, string valueType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->SetBinaryTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->SetBinaryTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (data != null) localVarFileParams.Add("data", this.Configuration.ApiClient.ParameterToFile("data", data));
            if (valueType != null) localVarFormParams.Add("valueType", this.Configuration.ApiClient.ParameterToString(valueType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBinaryTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetBinaryTaskVariableAsync (string id, string varName, byte[] data = null, string valueType = null)
        {
             await SetBinaryTaskVariableAsyncWithHttpInfo(id, varName, data, valueType);

        }

        /// <summary>
        ///  Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/7.13/user-guide/process-engine/variables/).
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the task to retrieve the variable for.</param>
        /// <param name="varName">The name of the variable to retrieve.</param>
        /// <param name="data"> (optional)</param>
        /// <param name="valueType"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetBinaryTaskVariableAsyncWithHttpInfo (string id, string varName, byte[] data = null, string valueType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TaskVariableApi->SetBinaryTaskVariable");
            // verify the required parameter 'varName' is set
            if (varName == null)
                throw new ApiException(400, "Missing required parameter 'varName' when calling TaskVariableApi->SetBinaryTaskVariable");

            var localVarPath = "/task/{id}/variables/{varName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (varName != null) localVarPathParams.Add("varName", this.Configuration.ApiClient.ParameterToString(varName)); // path parameter
            if (data != null) localVarFileParams.Add("data", this.Configuration.ApiClient.ParameterToFile("data", data));
            if (valueType != null) localVarFormParams.Add("valueType", this.Configuration.ApiClient.ParameterToString(valueType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBinaryTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
