/* 
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * OpenAPI spec version: 7.13.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Camunda.Client.Client;
using Camunda.Client.Model;

namespace Camunda.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IEventSubscriptionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;EventSubscriptionDto&gt;</returns>
        List<EventSubscriptionDto> GetEventSubscriptions (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSubscriptionDto&gt;</returns>
        ApiResponse<List<EventSubscriptionDto>> GetEventSubscriptionsWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetEventSubscriptionsCount (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetEventSubscriptionsCountWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;EventSubscriptionDto&gt;</returns>
        System.Threading.Tasks.Task<List<EventSubscriptionDto>> GetEventSubscriptionsAsync (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSubscriptionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSubscriptionDto>>> GetEventSubscriptionsAsyncWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetEventSubscriptionsCountAsync (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetEventSubscriptionsCountAsyncWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class EventSubscriptionApi : IEventSubscriptionApi
    {
        private Camunda.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSubscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventSubscriptionApi(String basePath)
        {
            this.Configuration = new Camunda.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSubscriptionApi"/> class
        /// </summary>
        /// <returns></returns>
        public EventSubscriptionApi()
        {
            this.Configuration = Camunda.Client.Client.Configuration.Default;

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSubscriptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventSubscriptionApi(Camunda.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Camunda.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Camunda.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;EventSubscriptionDto&gt;</returns>
        public List<EventSubscriptionDto> GetEventSubscriptions (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {
             ApiResponse<List<EventSubscriptionDto>> localVarResponse = GetEventSubscriptionsWithHttpInfo(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSubscriptionDto&gt;</returns>
        public ApiResponse< List<EventSubscriptionDto> > GetEventSubscriptionsWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {

            var localVarPath = "/event-subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventSubscriptionId", eventSubscriptionId)); // query parameter
            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventName", eventName)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventType", eventType)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeEventSubscriptionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSubscriptionDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSubscriptionDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSubscriptionDto>)));
        }

        /// <summary>
        ///  Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of List&lt;EventSubscriptionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSubscriptionDto>> GetEventSubscriptionsAsync (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {
             ApiResponse<List<EventSubscriptionDto>> localVarResponse = await GetEventSubscriptionsAsyncWithHttpInfo(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSubscriptionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSubscriptionDto>>> GetEventSubscriptionsAsyncWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null, string sortBy = null, string sortOrder = null, int? firstResult = null, int? maxResults = null)
        {

            var localVarPath = "/event-subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventSubscriptionId", eventSubscriptionId)); // query parameter
            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventName", eventName)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventType", eventType)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeEventSubscriptionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (firstResult != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstResult", firstResult)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResults", maxResults)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSubscriptionDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSubscriptionDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSubscriptionDto>)));
        }

        /// <summary>
        ///  Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetEventSubscriptionsCount (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null)
        {
             ApiResponse<CountResultDto> localVarResponse = GetEventSubscriptionsCountWithHttpInfo(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public ApiResponse< CountResultDto > GetEventSubscriptionsCountWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null)
        {

            var localVarPath = "/event-subscription/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventSubscriptionId", eventSubscriptionId)); // query parameter
            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventName", eventName)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventType", eventType)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeEventSubscriptionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventSubscriptionsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

        /// <summary>
        ///  Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetEventSubscriptionsCountAsync (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null)
        {
             ApiResponse<CountResultDto> localVarResponse = await GetEventSubscriptionsCountAsyncWithHttpInfo(eventSubscriptionId, eventName, eventType, executionId, processInstanceId, activityId, tenantIdIn, withoutTenantId, includeEventSubscriptionsWithoutTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/7.13/reference/rest/event-subscription/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventSubscriptionId">Only select subscription with the given id. (optional)</param>
        /// <param name="eventName">Only select subscriptions for events with the given name. (optional)</param>
        /// <param name="eventType">Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)</param>
        /// <param name="executionId">Only select subscriptions that belong to an execution with the given id. (optional)</param>
        /// <param name="processInstanceId">Only select subscriptions that belong to a process instance with the given id. (optional)</param>
        /// <param name="activityId">Only select subscriptions that belong to an activity with the given id. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeEventSubscriptionsWithoutTenantId">Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetEventSubscriptionsCountAsyncWithHttpInfo (string eventSubscriptionId = null, string eventName = null, string eventType = null, string executionId = null, string processInstanceId = null, string activityId = null, string tenantIdIn = null, bool? withoutTenantId = null, bool? includeEventSubscriptionsWithoutTenantId = null)
        {

            var localVarPath = "/event-subscription/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventSubscriptionId", eventSubscriptionId)); // query parameter
            if (eventName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventName", eventName)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eventType", eventType)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (tenantIdIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdIn", tenantIdIn)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (includeEventSubscriptionsWithoutTenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeEventSubscriptionsWithoutTenantId", includeEventSubscriptionsWithoutTenantId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventSubscriptionsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountResultDto)));
        }

    }
}
